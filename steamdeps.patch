--- steam-launcher/bin_steamdeps.py.orig	2020-07-29 17:44:37.000000000 +0200
+++ steam-launcher/bin_steamdeps.py	2020-07-29 19:54:23.553743588 +0200
@@ -126,16 +193,27 @@
 # N.B. Version checks are not supported on virtual packages
 #
 def is_provided(pkgname):
-    """
-    Check to see if another package Provides this package
-    """
-    cache = apt.Cache()
-    pkgs = cache.get_providing_packages(pkgname)
-    for pkg in pkgs:
-        if pkg.is_installed:
-            return True
-    return False
+    if ":" in pkgname:
+        pkgname, arch = pkgname.split(":", 1)
+    else:
+        arch = None
 
+    if pkgname.startswith("@"):
+        pkgname = pkgname[1:]
+
+    process = subprocess.Popen(['rpm', '-q', '--what-provides', pkgname],
+                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    for line in process.stdout:
+        line = line.decode( "utf-8" ).strip()
+        match = PLD_PKGNAME_RE.match(line)
+        if ( match is None ):
+            continue
+        pkg_arch = match.group(4)
+        if arch and pkg_arch and PLD_ARCH_MAP[pkg_arch] != arch:
+            print("bad arch {0!r}!={1!r}".format(PLD_ARCH_MAP[pkg_arch], arch))
+            continue
+        return True
+    return False
 
 ###
 class Package:
@@ -157,9 +235,17 @@
             return is_provided(self.name)
 
         for (op, version) in self.version_conditions:
-            if subprocess.call(['dpkg', '--compare-versions', self.installed,
-                                op, version]) != 0:
-                return False
+                    rc = subprocess.call(['rpmvercmp', self.installed, version], stdout=open("/dev/null","w") )
+                    if op in ("=", "==") and rc != 0:
+                        return False
+                    if op == ">" and rc != 1:
+                        return False
+                    if op == ">=" and rc not in (0, 1):
+                        return False
+                    if op == "<" and rc != 2:
+                        return False
+                    if op == "<=" and rc not in (0, 2):
+                        return False
 
         return True
 
@@ -185,6 +271,7 @@
 
 
 def remap_package(name):
+    return name
     if name in (
             'python-apt',
     ):
@@ -289,6 +376,8 @@
         programs = [
             ("konsole",
              ["konsole", "--nofork", "-p", "tabtitle=" + title, "-e"]),
+            ("Terminal",
+             ["Terminal", "--disable-server", "--title"+title, "-x"]),
             ("xterm",
              ["xterm", "-bg", "#383635", "-fg", "#d1cfcd", "-T", title, "-e"]),
             ("x-terminal-emulator",
@@ -419,11 +515,11 @@
             "STEAM_DEPENDENCY_VERSION"])
         return False
 
-    # Make sure we can use dpkg on this system.
+    # Make sure we can use rpm on this system.
     try:
-        subprocess.call(['dpkg', '--version'], stdout=subprocess.PIPE)
+        subprocess.call(['rpm', '--version'], stdout=subprocess.PIPE)
     except FileNotFoundError:
-        sys.stderr.write("Couldn't find dpkg, please update steamdeps for "
+        sys.stderr.write("Couldn't find rpm, please update steamdeps for "
                          "your distribution.\n")
         return False
 
@@ -496,10 +596,20 @@
 
         row = []
         for section in line.split("|"):
-            package = create_package(section)
+            pld_pkg = PLD_PACKAGE_MAP.get(section, section)
+            if not pld_pkg:
+                continue
+
+            package = create_package( pld_pkg )
             if package is None:
                 continue
 
+            if package.name in packages:
+                existing = packages[package.name]
+                if existing.version_conditions == package.version_conditions:
+                    row.append( existing )
+                    continue
+
             packages[package.name] = package
             row.append(package)
 
@@ -570,7 +686,10 @@
                 satisfied = True
                 break
         if not satisfied:
-            needed.add(row[0])
+            if row[0].name not in consider_installed:
+                needed.add( row[0] )
+            else:
+                print("Considering {0} already installed".format(row[0].name))
 
     # If we have anything to install, do it!
     if len(needed) > 0:
 
